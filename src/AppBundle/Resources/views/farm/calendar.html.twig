{% extends '::base_topbar.html.twig' %}

{% block title %}
Planning
{% endblock %}

{% block plugins_stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('remark/3.0.5/classic/global/vendor/fullcalendar/fullcalendar.css') }}">
    <link rel="stylesheet" href="{{ asset('remark/3.0.5/classic/global/vendor/fullcalendar/fullcalendar.print.css') }}" media="print">
    <link rel="stylesheet" href="{{ asset('remark/3.0.5/classic/global/vendor/select2/select2.css') }}">

    <link rel="stylesheet" href="{{ asset('remark/3.0.5/classic/global/vendor/bootstrap-datepicker/bootstrap-datepicker.css') }}">
    <link rel="stylesheet" href="{{ asset('remark/3.0.5/classic/global/vendor/jt-timepicker/jquery-timepicker.css') }}">
    <link rel="stylesheet" href="{{ asset('remark/3.0.5/classic/global/vendor/bootstrap-touchspin/bootstrap-touchspin.css') }}">
    <link rel="stylesheet" href="{{ asset('remark/3.0.5/classic/global/vendor/jquery-selective/jquery-selective.css') }}">
    <link rel="stylesheet" href="{{ asset('remark/3.0.5/classic/topbar/assets/examples/css/apps/calendar.css') }}">
{% endblock %}

{% block page_stylesheets %}
    {{ parent() }}
    <style>
        table tr > td > span > button > i.icon {
            visibility: hidden;
        }

        table tr > td > span > a > i.icon {
            visibility: hidden;
        }

        table tr:hover > td > span > button > i.icon {
            visibility: visible;
        }

        table tr:hover > td > span > a > i.icon {
            visibility: visible;
        }

        .actionLink {
            text-decoration: none !important;
            color: #526069;
        }

        .helpLink {
            text-decoration: none !important;
            color: #76838f;
        }

        .helpLink:hover {
            text-decoration: underline;
            color: #526069;
        }

        table tr:hover > td > a.actionLink {
            text-decoration: underline !important;
            color: #526069;
        }

        label {
            font-weight: 500;
            font-family: Roboto, sans-serif;
        }

        .hidden {
            display: none;
        }

        .rotate {
            -moz-transition: all .2s linear;
            -webkit-transition: all .2s linear;
            transition: all .2s linear;
        }

        .rotate.down {
            -ms-transform: rotate(135deg);
            -moz-transform: rotate(135deg);
            -webkit-transform: rotate(135deg);
            transform: rotate(135deg);
        }

        .highcharts-credits {
            visibility: hidden !important;
        }
    </style>
{% endblock %}

{% block body_class %}animsition site-navbar-small app-calendar page-aside-left{% endblock %}

{% block page %}
    <div class="page-main">
        <div class="calendar-container">
            <div id="calendar" ></div>
            <!--AddEvent Dialog -->
            <div class="modal fade" id="addNewEvent" aria-hidden="true" aria-labelledby="addNewEvent"
                 role="dialog" tabindex="-1">
                <div class="modal-dialog modal-lg modal-info">
                    <form class="modal-content form-horizontal" action="#" method="post" role="form">
                        <div class="modal-header">
                            <button type="button" class="close" aria-hidden="true" data-dismiss="modal">Ã—</button>
                            <h4 class="modal-title">Ajouter une intervention</h4>
                        </div>
                        <div class="modal-body">
                            {{ render(controller('AppBundle:Action:newFromCalendar')) }}
                        </div>
                    </form>
                </div>
            </div>
            <!-- End AddEvent Dialog -->
            <!-- Edit Dialog -->
            <div class="modal fade" id="showEvent" aria-hidden="true" aria-labelledby="showEvent"
                 role="dialog" tabindex="-1" data-show="false">
                <div class="modal-dialog modal-lg modal-info" >
                    <div class="modal-content">
                        <div class="modal-body" id="pushHere">

                        </div>

                    </div>
                </div>
            </div>
            <!-- End EditEvent Dialog -->

        </div>
    </div>
{% endblock %}
{% block footer %}
<!-- Site Action -->
<div class="site-action" data-plugin="actionBtn">
    <button type="button" class="site-action-toggle btn-raised btn btn-danger btn-floating">
        <i class="front-icon wb-plus animation-scale-up" aria-hidden="true"></i>
        <i class="back-icon wb-delete animation-scale-up" aria-hidden="true"></i>
    </button>
</div>
<!-- End Site Action -->

{% endblock %}

{% block plugins_javascripts %}
    {{ parent() }}
    <script src="{{ asset('remark/3.0.5/classic/global/vendor/jquery-ui/jquery-ui.min.js') }}"></script>
    <script src="{{ asset('remark/3.0.5/classic/global/vendor/moment/moment.min.js') }}"></script>
    <script src="{{ asset('remark/3.0.5/classic/global/vendor/fullcalendar/fullcalendar.js') }}"></script>
    <script src="{{ asset('remark/3.0.5/classic/global/vendor/fullcalendar/locale/fr.js') }}"></script>

    <script src="{{ asset('remark/3.0.5/classic/global/vendor/jquery-selective/jquery-selective.min.js') }}"></script>
    <script src="{{ asset('remark/3.0.5/classic/global/vendor/bootstrap-touchspin/bootstrap-touchspin.min.js') }}"></script>
    <script src="{{ asset('remark/3.0.5/classic/global/vendor/bootbox/bootbox.js') }}"></script>

    <script src="{{ asset('remark/3.0.5/classic/global/vendor/select2/select2.min.js') }}"></script>
    {#<script src="{{ asset('remark/3.0.5/classic/global/js/Plugin/select2.js') }}"></script>#}

    <script src="{{ asset('front/global/vendor/bootstrap-datepicker/bootstrap-datepicker.js') }}"></script>
    <script src="{{ asset('front/global/vendor/bootstrap-datepicker/bootstrap-datepicker.fr.js') }}"></script>
    <script src="{{ asset('front/global/vendor/jt-timepicker/jquery.timepicker.js') }}"></script>
    <script src="{{ asset('front/global/vendor/datepair-js/datepair.min.js') }}"></script>
    <script src="{{ asset('front/global/vendor/datepair-js/jquery.datepair.min.js') }}"></script>
    <script src="{{ asset('front/global/vendor/asspinner/jquery-asSpinner.min.js') }}"></script>


    <script src="{{ asset('front/global/js/components/bootstrap-datepicker.js') }}"></script>
    <script src="{{ asset('front/global/js/components/jt-timepicker.js') }}"></script>
    <script src="{{ asset('front/global/js/components/datepair-js.js') }}"></script>
    <script src="{{ asset('front/global/js/components/asspinner.js') }}"></script>
{% endblock %}

{% block page_javascripts %}
    {{ parent() }}
    <script src="{{ asset('remark/3.0.5/classic/topbar/assets/js/Site.js') }}"></script>
    <script>
        (function (global, factory) {
            if (typeof define === "function" && define.amd) {
                define('/App/Calendar', ['exports', 'Site', 'Config'], factory);
            } else if (typeof exports !== "undefined") {
                factory(exports, require('Site'), require('Config'));
            } else {
                var mod = {
                    exports: {}
                };
                factory(mod.exports, global.Site, global.Config);
                global.AppCalendar = mod.exports;
            }
        })(this, function (exports, _Site2, _Config) {
            'use strict';

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.getInstance = exports.run = exports.AppCalendar = undefined;

            var _Site3 = babelHelpers.interopRequireDefault(_Site2);

            var Config = babelHelpers.interopRequireWildcard(_Config);

            var AppCalendar = function (_Site) {
                babelHelpers.inherits(AppCalendar, _Site);

                function AppCalendar() {
                    babelHelpers.classCallCheck(this, AppCalendar);
                    return babelHelpers.possibleConstructorReturn(this, (AppCalendar.__proto__ || Object.getPrototypeOf(AppCalendar)).apply(this, arguments));
                }

                babelHelpers.createClass(AppCalendar, [{
                    key: 'processed',
                    value: function processed() {
                        babelHelpers.get(AppCalendar.prototype.__proto__ || Object.getPrototypeOf(AppCalendar.prototype), 'processed', this).call(this);

                        this.$actionToggleBtn = $('.site-action-toggle');
                        this.$addNewCalendarForm = $('#addNewCalendar').modal({
                            show: false
                        });

                        this.handleFullcalendar();
                        this.handleSelective();
                        this.handleAction();
                        this.handleListItem();
                        this.handleEventList();
                    }
                }, {
                    key: 'handleFullcalendar',
                    value: function handleFullcalendar() {
                        var myEvents = [
                            {% for action in actions %}
                            {
                            title: '{{ action.intervention.name }} sur {{ action.cropCycle.name }} @ {{ action.cropCycle.plot.name }} ',
                                start: '{{ action.startDatetime | date('Y-m-d\\TH:i:s') }}',
                            end: '{{ action.endDatetime | date('Y-m-d\\TH:i:s') }}',
                            backgroundColor: Config.colors('cyan', 600),
                            borderColor: Config.colors('cyan', 600),
                                id:'{{ action.id }}'
                        }{% if not loop.last %},{% endif %}
                            {% endfor %}

                        ];

                        var i = 0;

                        var myOptions = {
                            header: {
                                left: null,
                                center: 'prev,title,next',
                                right: 'month,agendaWeek,agendaDay,listMonth,listWeek'
                            },
                            defaultView:'month',
                            height: 600,
                            locale: 'fr',
                            defaultDate: '{{ 'now' | date('Y-m-d') }}',
                            selectable: true,
                            selectHelper: true,
                            select: function select(start, end, jsEvent, view) {
                                $('#addNewEvent').modal('show');
                                $('#addNewEvent').on('shown.bs.modal', function (e) {
                                    if(i==0) {
                                        $('.select2').select2({dropdownParent: $("#addNewEvent")});
                                        $('.select2-keep').select2({closeOnSelect: false});
                                        i++;
                                    }
                                });
                                $('#action_calendar_periods_0_startDatetime_date').val(moment(start).format('L'));
                                $('#action_calendar_periods_0_startDatetime_time').val(moment(start).format('LT'));
                                $('#action_calendar_periods_0_endDatetime_date').val(moment(end).format('L'));
                                $('#action_calendar_periods_0_endDatetime_time').val(moment(end).format('LT'));


                            },
                            draggable:false,
                            editable: false,
                            eventLimit: true,
                            windowResize: function windowResize(view) {
                                var width = $(window).outerWidth();
                                var options = Object.assign({}, myOptions);
                                options.events = view.calendar.getEventCache();
                                options.aspectRatio = width < 667 ? 0.5 : 1.35;

                                $('#calendar').fullCalendar('destroy');
                                $('#calendar').fullCalendar(options);
                            },
                            eventClick: function eventClick(event) {
                                $('#showEvent').modal('show');
                                $('#pushHere').append(event.id)

                            },
                            eventDragStart: function eventDragStart() {
                                $('.site-action').data('actionBtn').show();
                            },
                            eventDragStop: function eventDragStop() {
                                $('.site-action').data('actionBtn').hide();
                            },

                            events: myEvents,
                            droppable: false
                        };

                        var _options = void 0;
                        var myOptionsMobile = Object.assign({}, myOptions);

                        myOptionsMobile.aspectRatio = 0.5;
                        _options = $(window).outerWidth() < 667 ? myOptionsMobile : myOptions;

                        $('#editNewEvent').modal();
                        $('#calendar').fullCalendar(_options);
                    }
                }, {
                    key: 'handleSelective',
                    value: function handleSelective() {

                        var member = [{
                            id: 'uid_1',
                            name: 'Herman Beck',
                            avatar: '../../../../global/portraits/1.jpg'
                        }, {
                            id: 'uid_2',
                            name: 'Mary Adams',
                            avatar: '../../../../global/portraits/2.jpg'
                        }, {
                            id: 'uid_3',
                            name: 'Caleb Richards',
                            avatar: '../../../../global/portraits/3.jpg'
                        }, {
                            id: 'uid_4',
                            name: 'June Lane',
                            avatar: '../../../../global/portraits/4.jpg'
                        }];

                        var items = [{
                            id: 'uid_1',
                            name: 'Herman Beck',
                            avatar: '../../../../global/portraits/1.jpg'
                        }, {
                            id: 'uid_2',
                            name: 'Caleb Richards',
                            avatar: '../../../../global/portraits/2.jpg'
                        }];

                        $('.plugin-selective').selective({
                            namespace: 'addMember',
                            local: member,
                            selected: items,
                            buildFromHtml: false,
                            tpl: {
                                optionValue: function optionValue(data) {
                                    return data.id;
                                },
                                frame: function frame() {
                                    return '<div class="' + this.namespace + '">\n          ' + this.options.tpl.items.call(this) + '\n          <div class="' + this.namespace + '-trigger">\n          ' + this.options.tpl.triggerButton.call(this) + '\n          <div class="' + this.namespace + '-trigger-dropdown">\n          ' + this.options.tpl.list.call(this) + '\n          </div>\n          </div>\n          </div>';
                                },
                                triggerButton: function triggerButton() {
                                    return '<div class="' + this.namespace + '-trigger-button"><i class="wb-plus"></i></div>';
                                },
                                listItem: function listItem(data) {
                                    return '<li class="' + this.namespace + '-list-item"><img class="avatar" src="' + data.avatar + '">' + data.name + '</li>';
                                },
                                item: function item(data) {
                                    return '<li class="' + this.namespace + '-item"><img class="avatar" src="' + data.avatar + '" title="' + data.name + '">' + this.options.tpl.itemRemove.call(this) + '</li>';
                                },
                                itemRemove: function itemRemove() {
                                    return '<span class="' + this.namespace + '-remove"><i class="wb-minus-circle"></i></span>';
                                },
                                option: function option(data) {
                                    return '<option value="' + this.options.tpl.optionValue.call(this, data) + '">' + data.name + '</option>';
                                }
                            }
                        });
                    }
                }, {
                    key: 'handleAction',
                    value: function handleAction() {
                        var _this2 = this;

                        this.$actionToggleBtn.on('click', function (e) {
                            _this2.$addNewEvent.modal('show');
                            e.stopPropagation();
                        });
                    }
                }, {
                    key: 'handleEventList',
                    value: function handleEventList() {
                        $('#addNewEventBtn').on('click', function () {
                            $('#addNewEvent').modal('show');
                        });

                        $('.calendar-list .calendar-event').each(function () {
                            var $this = $(this),
                                    color = $this.data('color').split('-');
                            $this.data('event', {
                                title: $this.data('title'),
                                stick: $this.data('stick'),
                                backgroundColor: Config.colors(color[0], color[1]),
                                borderColor: Config.colors(color[0], color[1])
                            });
                            $this.draggable({
                                zIndex: 999,
                                revert: true,
                                revertDuration: 0,
                                appendTo: '.page',
                                helper: function helper() {
                                    return '<a class="fc-day-grid-event fc-event fc-start fc-end" style="background-color:' + Config.colors(color[0], color[1]) + ';border-color:' + Config.colors(color[0], color[1]) + '">\n          <div class="fc-content">\n            <span class="fc-title">' + $this.data('title') + '</span>\n          </div>\n          </a>';
                                }
                            });
                        });
                    }
                }, {
                    key: 'handleListItem',
                    value: function handleListItem() {
                        this.$actionToggleBtn.on('click', function (e) {
                            $('#addNewCalendar').modal('show');
                            e.stopPropagation();
                        });

                        $(document).on('click', '[data-tag=list-delete]', function (e) {
                            bootbox.dialog({
                                message: 'Do you want to delete the calendar?',
                                buttons: {
                                    success: {
                                        label: 'Delete',
                                        className: 'btn-danger',
                                        callback: function callback() {
                                            // $(e.target).closest('.list-group-item').remove();
                                        }
                                    }
                                }
                            });
                        });
                    }
                }]);
                return AppCalendar;
            }(_Site3.default);

            var instance = null;

            function getInstance() {
                if (!instance) {
                    instance = new AppCalendar();
                }
                return instance;
            }

            function run() {
                var app = getInstance();
                app.run();
            }

            exports.default = AppCalendar;
            exports.AppCalendar = AppCalendar;
            exports.run = run;
            exports.getInstance = getInstance;
        });

        $(document).ready(function() {
            AppCalendar.run();
        });
    </script>

    {{ include('@AppBundle/Resources/public/js/addActionFromCalendar.js') }}



{% endblock %}
