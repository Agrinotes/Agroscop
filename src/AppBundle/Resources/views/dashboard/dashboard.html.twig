{% extends 'base_topbar.html.twig' %}

{% block title %}Bienvenue sur votre exploitation{% endblock %}

{% block page_stylesheets %}
    <link rel="stylesheet" href="{{ asset('remark/3.0.5/classic/topbar/assets/examples/css/apps/location.css')}}"> {# Temporary fix #}
    <style>
        .leaflet-control-draw-measure {
            background-image: url("{{asset('remark/3.0.5/classic/global/vendor/leaflet-measure/images/measure-control.png')}}");
            background-position: 50% 50%;
        }

        .enabled{
            background-color: yellow !important;
        }

        .leaflet-popup-tip-container {
            left: -35px;
        }
        
        .leaflet-control-layers-toggle {
            font-family: Roboto, sans-serif;
        }
        
        .leaflet-editing-icon {
            border-radius: 100%;
            opacity: 1;
        }
        
        .created-div {
            border: 10px solid #088;
            -webkit-border-radius: 30px;
            -moz-border-radius: 30px;
            border-radius: 30px;
            height: 20px;
            width: 20px;
            -webkit-animation: hugo 0.5s;
            -moz-animation: hugo 0.5s;
            animation: hugo 0.5s;
            transform-origin: center;
            /*opacity: 0.0*/
        }
        
        @keyframes hugo {
            from {
                transform: scale(3);
            }
            to {
                transform: none;
            }
        }
        
        .leaflet-draw {
            display: none;
        }
    </style>
{% endblock page_stylesheets %}
   
{% block body_class %}animsition site-navbar-small app-location page-aside-scroll page-aside-left{% endblock %}

{% block page %}
        <!-- Page aside -->
        <div class="page-aside">
            <div class="page-aside-switch">
                <i class="icon md-chevron-left" aria-hidden="true"></i>
                <i class="icon md-chevron-right" aria-hidden="true"></i>
            </div>
            <div class="page-aside-inner">
                <div class="app-location-list page-aside-scroll">
                    <div data-role="container">
                        <div data-role="content">
                            <div class="list-group row">
                                <!-- Add a plot panel -->
                                <div id="add_plot_div" class="col-lg-12" style="padding-right: 0px;margin-bottom: 15px;margin-top: 15px">
                                    <!-- Add a plot button -->
                                    <button class="btn btn-info btn-block" onclick="
                                    $('#form_new_plot').toggle(400);       
                                    $(this).text(function(i, text){
                                    window.drawControl._toolbars[L.DrawToolbar.TYPE]._modes.polygon.handler.disable(); 
                                    window.featureGroup2.clearLayers();
                                    $('form')[0].reset();
                                    $('.leaflet-draw').hide();

                                    return text === 'Ajouter une parcelle' ? 'Annuler' : 'Ajouter une parcelle';  
                                    })">Ajouter une parcelle</button>
                                    <!-- End Add a plot button -->
                                    
                                    <!-- Add a plot form -->
                                    <div id="form_new_plot" class="panel" style="display:none;margin-top:15px;">
                                        <div class="panel-body">
                                            {{ render(controller('AppBundle:Plot:New')) }}
                                        </div>
                                    </div>
                                    <!-- End Add a plot button -->
                                </div>
                                <!-- End Add a plot panel -->
                                <!-- Plot panels -->
                                <div class="col-lg-12" style="padding-left:15px; padding-right:0px;">
                                    <div class="panel-group" id="exampleAccordionDefault" aria-multiselectable="true" role="tablist">
                                        {% if farm.plots is not empty %}
                                            {% for plot in farm.plots %}
                                            {% if plot.name is not empty %}
                                            <div class="panel">
                                                <div class="panel-heading" id="panel_plot_{{plot.id}}" data-plot-id={{ loop.index0 }} role="tab">
                                                    <a class="panel-title collapsed friend-name" data-toggle="collapse" href="#plot_{{plot.id}}" data-parent="#exampleAccordionDefault"
                                                        aria-expanded="false" aria-controls="exampleCollapseDefaultOne">
                                                    {{ plot.name | capitalize}} <small>{{ plot.area|number_format(2, ',', ' ') }} ha</small>
                                                    </a>
                                                </div>
                                                <div class="panel-collapse collapse" id="plot_{{plot.id}}" aria-labelledby="panel_plot_{{plot.id}}" role="tabpanel" aria-expanded="false"
                                                    style="height: 0px;">
                                                    <div class="panel-body table-responsive" style="padding-top: 0px;padding-bottom: 5px;">
                                                        <a href="{{path('cropcycle_new',{'id':plot.id})}}" class="btn btn-default btn-outline btn-block" style="margin-bottom:10px;">Ajouter une culture</a>

                                                        {% if plot.cropCycles is not empty %}
                                                        <table class="table table-hover ">
                                                            <tbody>
                                                            {% set cropcycle_index = 1 %}
                                                            {% for cycle in plot.cropCycles | sortbyfield('startDatetime') %}
                                                                {% if cycle.status == "ActiveAction" %}
                                                                <tr {% if cropcycle_index == 1 %}style="border-top:none;" {% endif %}>
                                                                    <td style="color:lightgrey;{% if loop.first %}border-top:none;{% endif %}">{{ cropcycle_index }}</td>
                                                                    <td {% if loop.first %}style="border-top:none;" {% endif %}><a href="{{ path('cropcycle_show',{'id':cycle.id})}}" style="color: rgba(118,131,143,1);text-decoration:none;">{{ cycle.name }} <small>{{cycle.area |number_format(2, ',', ' ') }} ha</small></a></td>

                                                                    <td {% if loop.first %}style="border-top:none;" {% endif %}></td>
                                                                </tr>
                                                                    {% set cropcycle_index = cropcycle_index+1 %}
                                                                {% endif %}
                                                            {% endfor %}
                                                            </tbody>
                                                        </table>


                                                        {% endif %}
                                                        {% if plot.cropCycles is not empty %}
                                                        <a href="{{path('plot_show',{'id':plot.id})}}" class="btn btn-default btn-outline btn-block" style=";margin-bottom:10px;">Tous les cycles de culture</a>
                                                        {% endif %}
                                                    </div>
                                                </div>
                                            </div>
                                            {% endif %}
                                            {% endfor %} 
                                        {% endif %}
                                    </div>
                                </div>
                                <!-- End Plot panels --> 
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Page aside -->
        <div class="page-main">
            <div id="map">
            </div>
        </div>
{% endblock %}

{% block plugins_javascripts %}
    {{ parent() }}
    <script src="https://unpkg.com/leaflet.measurecontrol@1.0.0"></script>
{% endblock %}

{% block page_javascripts %}
{{ parent() }}
    <script src="{{ asset('remark/3.0.5/classic/topbar/assets/js/Site.js') }}"></script>
    <script src="{{ asset('remark/3.0.5/classic/global/js/Plugin/asscrollable.js') }}"></script>
    <script src="{{ asset('remark/3.0.5/classic/global/js/Plugin/slidepanel.js') }}"></script>
    <script src="{{ asset('remark/3.0.5/classic/global/js/Plugin/switchery.js') }}"></script> 
    {# Map script #}
    <script>
    (function (global, factory) {
        if (typeof define === "function" && define.amd) {
            define('/App/Location', ['exports', 'Site'], factory);
        } else if (typeof exports !== "undefined") {
            factory(exports, require('Site'));
        } else {
            var mod = {
                exports: {}
            };
            factory(mod.exports, global.Site);
            global.AppLocation = mod.exports;
        }
    })(this, function (exports, _Site2) {
        'use strict';

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getInstance = exports.run = exports.AppLocation = undefined;

        var _Site3 = babelHelpers.interopRequireDefault(_Site2);

        var Map = function () {
            function Map() {
                babelHelpers.classCallCheck(this, Map);


                this.window = $(window);
                this.$siteNavbar = $('.site-navbar');
                this.$siteFooter = $('.site-footer');
                this.$pageMain = $('.page-main');

                this.handleMapHeight();
            }

            babelHelpers.createClass(Map, [{
                key: 'handleMapHeight',
                value: function handleMapHeight() {
                    var footerH = this.$siteFooter.outerHeight(),
                            navbarH = this.$siteNavbar.outerHeight();
                    var mapH = this.window.height() - navbarH - footerH - 50;
                    this.$pageMain.outerHeight(mapH);
                }
            }, {
                key: 'getMap',
                value: function getMap() {
                    L.mapbox.accessToken = 'pk.eyJ1IjoiaHVnb2xlaG91eCIsImEiOiItOHl6Sm5jIn0.12l_k0K_Z28UE-Jc0kDgpw';
                    var map = L.mapbox.map('map','mapbox.streets',{ zoomControl: false }).setView([20,150], 2);
                    new L.Control.Zoom({ position: 'topright' }).addTo(map);
                    new L.Control.measureControl({ position: 'topright' }).addTo(map);


                    L.control.layers({
                        'Carte': L.mapbox.tileLayer('mapbox.streets').addTo(map),
                        'Google Satellite': L.tileLayer('http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}',{
                            maxZoom: 20,
                            subdomains:['mt0','mt1','mt2','mt3']
                        }),
                        'Google Street': L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}',{
                            maxZoom: 20,
                            subdomains:['mt0','mt1','mt2','mt3']
                        }),
                        'Image satellite Mapbox': L.mapbox.tileLayer('mapbox.streets-satellite'),
                    }).addTo(map);

                // Create a coords array
                var coords = [];

                //Drawing polygons
                {% if farm.plots is not empty %}
                    {% for plot in farm.plots %}
                        {% if plot.latLngs is not empty %}
                            var layer = L.geoJson({{ plot.latLngs | raw }});   
                            coords.push(layer.getBounds());
                        {% endif %}
                    {% endfor %}
                {% endif %}

                  // Handle click and zoom
                   $(".panel-heading").on("click", function() {
                    var plotId = $(this).attr("data-plot-id");
                    map.fitBounds(coords[plotId]);
                    }); 
                
                //Launch leaflet draw
                window.featureGroup2 = L.featureGroup().addTo(map);
                featureGroup2 = window.featureGroup2;
                // Enable drawing polygons
                window.drawControl = new L.Control.Draw({
                    edit: {
                        featureGroup: featureGroup2,
                        selectedPathOptions: {
                            dashArray: "8,6",
                            color: '#088',
                            opacity: 0.8,
                            weight: 1.5
                        }
                    },
                    draw: {
                        polyline: false,
                        circle: false,
                        marker: false,
                        rectangle: false,
                        polygon: {
                            icon: new L.DivIcon({
                                iconSize: new L.Point(20, 20),
                                className: 'leaflet-div-icon leaflet-editing-icon my-own-icon',
                                html: '<div class="created-div"></div>'
                            }),
                            shapeOptions: {
                                dashArray: "8,6",
                                color: '#088',
                                opacity: 0.8,
                                weight: 1.5
                            }
                        }
                    }
                }).addTo(map);

                                // Change Leaflet draw messages
                L.drawLocal = {
                    draw: {
                        toolbar: {
                            actions: {
                                title: 'Annulez le dessin',
                                text: 'Annuler'
                            },
                            buttons: {
                                polyline: 'Dessiner une polyligne',
                                polygon: 'Dessiner ma parcelle',
                                rectangle: 'Dessiner un rectangle',
                                circle: 'Dessiner un cercle',
                                marker: 'Dessiner un marqueur'
                            }
                        },
                        handlers: {
                            circle: {
                                tooltip: {
                                    start: 'Cliquez et déplacez pour dessiner un cercle.'
                                }
                            },
                            marker: {
                                tooltip: {
                                    start: 'Cliquez sur la carte pour placer un marqueur.'
                                }
                            },
                            polygon: {
                                tooltip: {
                                    start: 'Vous pouvez commencer à dessiner votre parcelle.',
                                    cont: 'Vous pouvez continuer à dessiner votre parcelle',
                                    end: 'Cliquez sur votre premier point quand vous avez terminé.'
                                }
                            },
                            polyline: {
                                error: '<strong>Erreur:</strong> Les arrêtes de la forme ne doivent pas se croiser!',
                                tooltip: {
                                    start: 'Cliquez pour commencer à mesurer.',
                                    cont: 'Cliquez pour continuer à dessiner.',
                                    end: 'Double-cliquez pour terminer la mesure.'
                                }
                            },
                            rectangle: {
                                tooltip: {
                                    start: 'Cliquez et déplacez pour dessiner un rectangle.'
                                }
                            },
                            simpleshape: {
                                tooltip: {
                                    end: 'Relachez la souris pour finir de dessiner.'
                                }
                            }
                        }
                    },
                    edit: {
                        toolbar: {
                            actions: {
                                save: {
                                    title: 'Enregistrer les changements.',
                                    text: 'Enregistrer'
                                },
                                cancel: {
                                    title: 'Annuler les modifications.',
                                    text: 'Annuler'
                                }
                            },
                            buttons: {
                                edit: 'Modifier la parcelle.',
                                editDisabled: 'Aucune parcelle à modifier.',
                                remove: 'Supprimer la parcelle.',
                                removeDisabled: 'Aucune parcelle à supprimer.'
                            }
                        },
                        handlers: {
                            edit: {
                                tooltip: {
                                    text: 'Déplacez les points pour modifier la parcelle.',
                                    subtext: ''
                                }
                            },
                            remove: {
                                tooltip: {
                                    text: 'Cliquez sur la parcelle à supprimer'
                                }
                            }
                        }
                    }
                };



                    // On draw created, add polygon values to the form
                map.on('draw:created', function (e) {
                    var layer = e.layer;
                    featureGroup2.clearLayers();
                    featureGroup2.addLayer(layer);
                    $("#plot_area").val(getPolygonArea(layer));
                    var latLngs = JSON.stringify(layer.toGeoJSON());
                    $("#plot_latLngs").val(latLngs);
                    map.fitBounds(layer.getBounds());
                });

                // On draw edited, update polygon values to the form
                map.on('draw:edited', function (e) {
                    e.layers.eachLayer(function (layer) {
                        featureGroup2.clearLayers();
                        featureGroup2.addLayer(layer);
                        $("#plot_area").val(getPolygonArea(layer));
                        var latLngs = JSON.stringify(layer.toGeoJSON());
                        $("#plot_latLngs").val(latLngs);
                    });
                });
                // On draw deletestop, delete previous plot
                map.on('draw:deletestop', function (e) {
                    featureGroup2.clearLayers();
                    $("#plot_latLngs").val("");
                    $("#plot_area").val("");
                });

                // Get Polygon Area function
                function getPolygonArea(layer) {
                    var area = LGeo.area(layer) / 10000;
                    return area.toFixed(3);
                }

                    return map;
                }
            }]);
            return Map;
        }();

        var Markers = function () {
            function Markers(friends, map) {
                babelHelpers.classCallCheck(this, Markers);


                this.friends = friends;
                this.map = map;
                this.allMarkers = [];

                this.handleMarkers();
            }

            babelHelpers.createClass(Markers, [{
                key: 'handleMarkers',
                value: function handleMarkers() {
                    {% if farm.plots is not empty %}
                // Create FeatureGroup to handle the plots and cropCycles
                var featureGroup = L.featureGroup();
                var featureGroup2 = L.featureGroup();

                //Drawing polygons
                {% for plot in farm.plots %}
                    {% if plot.latLngs is not empty %}
                    // Add current polygon and add an attribute alt
                    var layer = L.geoJson({{ plot.latLngs | raw }});
                    //Set style
                    layer.setStyle({color: "white", Opacity:0.9, fillOpacity: 0.3, weight: 1.5});

                    //Add a popup
                    layer.bindPopup("<div class='friend-popup-info'><div class='detail'>" + "{{ plot.area | number_format(2,","," ") }} ha" + "</div><h3 class=\"margin-top-10\"><a href=\"{{ path('plot_show',{'id':plot.id}) }}\">" + "{{ plot.name | upper }}"+"</a></h3></div>", {closeButton: false});

                    
                    // Add current polygon to featureGroup
                    featureGroup.addLayer(layer);
                    // Add it inside allMarkers array
                    this.allMarkers.push(layer);
                    {% endif %}

                    // Add cropcycles polygons
                    {% for cycle in plot.cropCycles %}
                        {% if cycle.latLngs is not empty and cycle.status == "ActiveAction" %}
                                // Add current polygon and add an attribute alt
                                var layer2 = L.geoJson({{ cycle.latLngs | raw }});
                                var color = "red";
                                {% for crop in cycle.crops %}
                                var color = "{{ crop.color }}";
                                {% endfor %}
                                //Set style
                                layer2.setStyle({color: color, Opacity:1, fillOpacity: 0.8, weight: 1.5});
                                //Add a popup
                                layer2.bindPopup("<div class='friend-popup-info'><div class='detail'>" + "{{ cycle.area | number_format(2,","," ") }} ha" + "</div><h3 class=\"margin-top-10\" style=\"font-weight: 500;color:#76838f;    text-transform: capitalize;\"><a href=\"{{ path('cropcycle_show',{'id':cycle.id}) }}\">" + "{{ cycle.name | capitalize }}"+"</a></h3><p>sur la parcelle " +"{{plot.name | capitalize}}"+"</p></div></div>", {closeButton: false});
                                // Add current polygon to featureGroup
                                featureGroup2.addLayer(layer2);
                        {% endif %}
                    {% endfor %}

                {% endfor %}
                // Add plots to the map
                featureGroup.addTo(this.map);
                featureGroup2.addTo(this.map);             

                //Zoom to farm bounds
                var bounds = featureGroup.getBounds();
                this.map.fitBounds(bounds);  
{% endif %}
                }
            },{
                key: 'getAllMarkers',
                value: function getAllMarkers() {
                    return this.allMarkers;
                }
            }]);
            return Markers;
        }();

        var AppLocation = function (_Site) {
            babelHelpers.inherits(AppLocation, _Site);

            function AppLocation() {
                babelHelpers.classCallCheck(this, AppLocation);
                return babelHelpers.possibleConstructorReturn(this, (AppLocation.__proto__ || Object.getPrototypeOf(AppLocation)).apply(this, arguments));
            }

            babelHelpers.createClass(AppLocation, [{
                key: 'processed',
                value: function processed() {
                    babelHelpers.get(AppLocation.prototype.__proto__ || Object.getPrototypeOf(AppLocation.prototype), 'processed', this).call(this);

                    this.window = $(window);
                    this.$listItem = $('.app-location .page-aside .list-group');
                    this.allFriends = $('.app-location .friend-info');
                    this.mapbox = new Map();

                    this.map = this.mapbox.getMap();
                    this.markers = new Markers(this.$allFriends, this.map);
                    this.allMarkers = this.markers.getAllMarkers();

                    this.friendNum = null;

                    this.handleResize();
                }
            }, {
                key: 'getDefaultState',
                value: function getDefaultState() {
                    return Object.assign(babelHelpers.get(AppLocation.prototype.__proto__ || Object.getPrototypeOf(AppLocation.prototype), 'getDefaultState', this).call(this), {
                        mapChange: true,
                        listItemActive: false
                    });
                }
            }, {
                key: 'handleResize',
                value: function handleResize() {
                    var _this4 = this;

                    this.window.on('resize', function () {
                        _this4.mapbox.handleMapHeight();
                    });
                }
            }]);
            return AppLocation;
        }(_Site3.default);

        var instance = null;

        function getInstance() {
            if (!instance) {
                instance = new AppLocation();
            }
            return instance;
        }

        function run() {
            var app = getInstance();
            app.run();
        }

        exports.default = AppLocation;
        exports.AppLocation = AppLocation;
        exports.run = run;
        exports.getInstance = getInstance;
    });
    </script>
    <script src="{{ asset('remark/3.0.5/classic/topbar/assets/examples/js/apps/location.js') }}"></script>
{% endblock %}
