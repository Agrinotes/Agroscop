{% extends 'base.html.twig' %}

{% block plugin_stylesheets %}
    {{ parent() }}
    <link href='https://api.mapbox.com/mapbox.js/v2.4.0/mapbox.css' rel='stylesheet'
          xmlns="http://www.w3.org/1999/html"/>

    <link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-draw/v0.2.3/leaflet.draw.css' rel='stylesheet'/>

    <style>

        .leaflet-editing-icon{
            border-radius: 100%;
            opacity: 1;
        }


        .created-div {
            border: 10px solid white;
            -webkit-border-radius: 30px;
            height: 20px;
            width: 20px;
            -webkit-animation: hugo 0.5s;
            transform-origin: center;
            /*opacity: 0.0*/
        }

        @keyframes hugo {
            from { transform: scale(3); }
            to { transform: none; }
        }
    </style>
{% endblock %}

{% block page %}
    <div class="page animsition">
        <div class="page-content">
            <div class="panel panel-bordered">
                <div class="panel-heading">
                    <h3 class="panel-title">Modifier la parcelle
                        <div class="pull-right" style="color:grey;display: inline;"><span id="display_area">{{ plot.area }}</span> ha</div>
                    </h3>
                </div>
                <div class="panel-body">
                    {{ form_start(edit_form) }}
                    <div class="row">
                        <div class="form-group form-material col-lg-4">
                            {{ form_label(edit_form.name) }}
                            {{ form_errors(edit_form.name) }}
                            {{ form_widget(edit_form.name) }}
                        </div>
                        <div class="">
                            {{ form_label(edit_form.area) }}
                            {{ form_errors(edit_form.area) }}
                            {{ form_widget(edit_form.area) }}
                            {{ form_label(edit_form.latLngs) }}
                            {{ form_errors(edit_form.latLngs) }}
                            {{ form_widget(edit_form.latLngs) }}
                        </div>
                    </div>
                    <div class="row" id="map" style="height: 60vh;"></div>

                    {{ form_widget(edit_form) }}

                </div>
                <div class="panel-footer">
                    <a class="btn btn-default" href="{{ path('plot_show', { 'id': plot.id }) }}">Annuler</a>

                    <button class="btn btn-danger margin-10" type="submit">Enregistrer</button>
                    {{ form_end(edit_form) }}
                </div>
            </div>


        <div class="panel">
            <div class="panel-heading">
                <h3 class="panel-title">Actions sensibles</h3>
            </div>
            <div class="panel-body">

                {% if is_granted('DELETE', plot) or is_granted('ROLE_ADMIN') %}
                    {{ form_start(delete_form) }}
                    <button class="btn btn-info margin-10" type="submit">Supprimer</button>
                    {{ form_end(delete_form) }}
                {% endif %}
            </div>
        </div>
    </div>
{% endblock %}

{% block core_plugin %}
    {{ parent() }}
    <script src="{{ asset('front/global/vendor/mapbox.js/mapbox.js') }}"></script>
    <script src="{{ asset('front/global/vendor/mapbox.js/plugins/leaflet.markercluster.js') }}"></script>
    <script src='https://api.mapbox.com/mapbox.js/plugins/leaflet-draw/v0.2.3/leaflet.draw.js'></script>
    <script src='https://api.mapbox.com/mapbox.js/plugins/leaflet-geodesy/v0.1.0/leaflet-geodesy.js'></script>
{% endblock %}

{% block template_config %}
    {{ parent() }}
    <script src="{{ asset('front/mmenu/assets/js/app.js') }}"></script>
    <script>
        // Mapbox access token
        L.mapbox.accessToken = 'pk.eyJ1IjoiaHVnb2xlaG91eCIsImEiOiItOHl6Sm5jIn0.12l_k0K_Z28UE-Jc0kDgpw';

        // Create the map
        var map = L.mapbox.map('map', 'mapbox.streets-satellite');

        // Where the polygons are stored
        var featureGroup = L.geoJson({{plot.latLngs|raw}}).addTo(map);

        // Zoom on plot bounds
        var bounds = featureGroup.getBounds();
        map.fitBounds(bounds);

        // Enable drawing polygons
        var drawControl = new L.Control.Draw({
            edit: {
                featureGroup: featureGroup,
                selectedPathOptions: {
                    dashArray: "8,6",
                    color: 'white',
                    opacity: 0.8,
                    weight: 1.5
                }
            },
            draw: {
                polyline: false,
                circle: false,
                marker: false,
                rectangle: false,
                polygon: {
                    icon: new L.DivIcon({
                        iconSize: new L.Point(20, 20),
                        className: 'leaflet-div-icon leaflet-editing-icon my-own-icon',
                        html: '<div class="created-div"></div>'
                    }),
                    shapeOptions: {
                        dashArray: "8,6",
                        color: 'white',
                        opacity: 0.8,
                        weight: 1.5
                    }
                }
            }
        }).addTo(map);

        // On draw created, add polygon values to the form
        map.on('draw:created', function (e) {
            var layer = e.layer;
            featureGroup.clearLayers();
            featureGroup.addLayer(layer);
            $("#plot_area").val(getPolygonArea(layer));
            $("#display_area").html(getPolygonArea(layer));
            var latLngs = JSON.stringify(layer.toGeoJSON());
            $("#plot_latLngs").val(latLngs);
            map.fitBounds(layer.getBounds());
        });

        // On draw created, add polygon values to the form
        map.on('draw:edited', function (e) {
            e.layers.eachLayer(function (layer) {
                featureGroup.clearLayers();
                featureGroup.addLayer(layer);
                $("#plot_area").val(getPolygonArea(layer));
                $("#display_area").html(getPolygonArea(layer));
                var latLngs = JSON.stringify(layer.toGeoJSON());
                $("#plot_latLngs").val(latLngs);
            });
        });


        // On draw deletestop, delete previous plot
        map.on('draw:deletestop', function (e) {
            featureGroup.clearLayers();
            $("#plot_latLngs").val("");
            $("#plot_area").val("");
            $("#display_area").html("0");
        });

        // Get Polygon Area
        function getPolygonArea(layer) {
            var area = LGeo.area(layer) / 10000;
            return area.toFixed(3) ;
        }
</script>

{% endblock %}
